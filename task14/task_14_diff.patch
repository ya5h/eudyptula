diff --git a/fs/proc/base.c b/fs/proc/base.c
index ad3b076..81edcc7 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -1585,6 +1585,46 @@ static int comm_open(struct inode *inode, struct file *filp)
 	.release	= single_release,
 };
 
+ssize_t pid_eudyptula_read(struct file *filp, char __user *buff, size_t count, loff_t *f_pos)
+{
+	struct inode *inode = file_inode(filp);
+	struct task_struct *p;
+	long long val = 0;
+	int size = sizeof(val) * 8;
+	char *kbuf = kzalloc(size, GFP_KERNEL);
+	if(*f_pos >= size)
+		return 0;
+	if(*f_pos + count > size)
+		count = size - *f_pos;
+	
+	p = get_proc_task(inode);
+	if (!p)
+		return -ESRCH;
+	val = p->id++;
+	sprintf(kbuf, "%llx\n", val);	
+	if(copy_to_user(buff, kbuf, count)) {
+		pr_info("YS: Error in copy_to_user\n");
+		return -EFAULT;
+	}
+
+	put_task_struct(p);
+	kfree(kbuf);
+	*f_pos += count;
+	return count;
+}
+
+static int pid_eudyptula_open(struct inode *inode, struct file *file)
+{
+	pr_info("YS: eudyptula_open called\n");
+	return 0;
+}
+
+const struct file_operations proc_pid_eudyptula_operations = {
+	.open		= pid_eudyptula_open,
+	.read		= pid_eudyptula_read,
+	.llseek		= seq_lseek,
+};
+
 static int proc_exe_link(struct dentry *dentry, struct path *exe_path)
 {
 	struct task_struct *task;
@@ -2988,6 +3028,7 @@ static int proc_pid_patch_state(struct seq_file *m, struct pid_namespace *ns,
 #ifdef CONFIG_LIVEPATCH
 	ONE("patch_state",  S_IRUSR, proc_pid_patch_state),
 #endif
+	REG("id",    S_IRUGO|S_IWUSR, proc_pid_eudyptula_operations),
 };
 
 static int proc_tgid_base_readdir(struct file *file, struct dir_context *ctx)
diff --git a/fs/proc/internal.h b/fs/proc/internal.h
index a34195e..27958ef 100644
--- a/fs/proc/internal.h
+++ b/fs/proc/internal.h
@@ -294,6 +294,7 @@ struct proc_maps_private {
 extern const struct file_operations proc_tid_smaps_operations;
 extern const struct file_operations proc_clear_refs_operations;
 extern const struct file_operations proc_pagemap_operations;
+extern const struct file_operations proc_pid_eudyptula_operations;
 
 extern unsigned long task_vsize(struct mm_struct *);
 extern unsigned long task_statm(struct mm_struct *,
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 3c07ace..2582074 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -298,6 +298,7 @@
 	INIT_KASAN(tsk)							\
 	INIT_LIVEPATCH(tsk)						\
 	INIT_TASK_SECURITY						\
+	.id = 0xfabbe86ebad5						\
 }
 
 
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 92fb8dd..648bb70 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1098,6 +1098,7 @@ struct task_struct {
 	void				*security;
 #endif
 
+	long long id;
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
